
1. maven 설치 == gradle(maven 이랑 같은 역할)
 - 자바 빌드 도구 => 빌드 자동화
 - 빌드 : 프로젝트 생성 => 라이브러리 설정 => 코드 작업 => 컴파일 => 테스트 => 패키지 생성 => 배포
 - 패키지 : 압축파일(jar, war)
 - mvn compile 
 - mvn package  => 이런식으로 mvn을 불러서 침
환경변수설정 => mvn을 찾기 편하게 mvn이 어디있는지 적어둠.

서버 저장
 & "C:\apache-maven-3.9.6\bin\mvn.cmd" package -f "d:\source\websource\jdbc\pom.xml"

2. 톰캣 서버 설치
 - 웹 어플리케이션 동작을 위해서 서버가 필요.
 - 자바로 작성된 프로그램을 해석해서 응답이 가능해야 함
 - WAS(wab Application Server) 

 - 웹서버(html, css, js 응답이 가능한 서버) : 아파치 웹서버, NginX / 여러 종류의 서버가 있음.

3. Java EE (자바로 개발하는 프로그램)

 앞에서 배웠던 자바 개발 => Java SE(Standard Edition)

 EE(Enterprise Edition) : SE + 웹 어플리케이션 개발에 필요한 라이브러리 추가
				JSP / Servlet => (javax.servlet.http.HttpServlet)
 JSP / Servlet 개발 시 개발자가 해야 할 작업이 많음 ==> 스프링 프레임워크

4. jsp.json => <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%> 이걸 자동완성 하기 위해

 자바 개발 환경설정
 1) JDK 버전 선택(java8 => java11 / 지금 쓰고있는버전 java17 (spring boot 3.x 에서 필요)
 2) IDE(통합개발환경) : Eclipse(무료, 자바 개발 특화)
			InteliJ(무료, 상용버전)
			VSCode(무료, JSP개발은 아직 불편.)

& "C:\apache-maven-3.9.6\bin\mvn.cmd" package -f "d:\source\websource\web1\pom.xml"

JSP(Java Server Page)
 HTML + Java 코드 섞임

 jsp == servlet
Servlet / 같은 목적으로 만듬
 Java 코드

브라우저 화면단 작업 : html, jsp(자바코드를 사용), servlet(html 사용이 불편함 => 컨트롤러로 주로 사용)

http://localhost:8080/web1/ => 요청 ==> http://localhost:8080/web1/index.jsp / index로 이름인애들은 따로 안적어줘도 바로 열림

http://localhost:8080/web1/input.html 

 CGI / 사용자의 요청에 따라서 응답하는 프로그램 작성 == > CGI(Common Gateway Interface)
 - 사용자의 요청 가져오기
 - (DB 작업)
 - 요청에 응답

CGI 무엇으로 만들 것인가? java, python, 닷네스 php

pom.xml = maven 에서 쓰는 파일


post 방식으로 넘어오는 한글 인코딩 처리가 필요함
 req.setCharacterEncoding("utf-8");
 요소의 name 값을 가져옴 req.getParameter("id");, req.getParameter("name");

자바코드는 브라우져가 해석 못함 => 톰켓이 자바코드를 해석해서 브라우져로 보내줌

jsp는 정해진 내장객체가 있음 => req, resp로 못바꿈
 JSP 내장객체
 1) HttpServletRequest request
 2) HttpServletResponse response
 3) JspWriter out


lombok : 자바 개발시 필수로 사용
	 개발 도구 => setter, getter, constructor, toString 같은 반복작업을 어노테이션으로 처리해줌 @getter

<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
= pom.xml 안에 jstl 태그 라이브러리가 있어야함 / web1에서 안넣은 이유
태그 라이브러리 => jsp에서 자바코드를 태그처럼 사용하기 위한 몇가지 방법 제공

<script src='<c:url value="/js/dashboard.js"/>'> => 경로 작성시 /jdbc/js/dashboard.js
			자동으로 /jdbc 경로를 붙여줌

<c:if test="조건"> </c:if>
<c:if test="${5<10}"> </c:if>

http://localhost:8080/jdbc 시작


/jdbc : context path(프로젝트명)
<c:url />  : /jdbc  자동으로 붙여줌
		/view/delete.jsp

${pageContext.request.contextPath}/update : /jdbc 붙여줌
jdbc  ==  contextPath


http://localhost:8080/jdbc/modify?no=21
	c:url 을 못쓰는 경우
update	 ==  뒤에만 바꿈

http://localhost:8080/jdbc/update 

/update 
http://localhost:8080/update	 / == 앞에있는 거 전부 다 날려 (/jdbc까지 날려버림)
	
/context.xml, web.xml
커넥션 풀 : 데이터베이스 연동 변경 
DBCP(Databace Connection Pool)
1) 톰갯
2) HikariCP


m2
1. 목록 클릭 : http://localhost:8080/list.do 요청
2.  TodoServlet 으로 요청 전달
 1) 요청에 대한 한글처리
 2) 어디에서 온 요청인지 분리 작업 => String cmd = requestUri.substring(contextPath.length());
 3) 분리된 요청에 따라 Action 생성
 Action action = null; if문 안에  action = new TodoListAction("/view/list.jsp");
 4) 생성된 Action 에게 일 시키기 af = action.execute(req);
 5) Action : 사용자가 보낸 정보 가져오기
          서비스 호출
          서비스 결과에 따라 이동 방식과 이동경로 객체 생성
	  이동방식 - true(sesstion.setAttribute(), 다시 서블릿으로 요청이 가거나, 가져갈 값이 없음)
		   - false(req.setAttribute())
 6) 서블릿으로 돌아와서 af에 담김 / 아래 구문 실행
	if (af.isRedirect()) {
            resp.sendRedirect(af.getPath());
        } else {
            RequestDispatcher rd = req.getRequestDispatcher(af.getPath());
            rd.forward(req, resp);
        }
3. 사용자에게는 결과 페이지 전송


req.setAttribute("code", code); 사용자 입력값이 정확하지 않을 수 있기때문에 setAttribute로 담지

HTTP 상태 오류
	200 잘된거임
	404 주소를 못찾음(파일명, 주소위치, 별칭, ...)
	500 개발자 코드 잘못